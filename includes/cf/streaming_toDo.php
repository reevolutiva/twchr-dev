<?php
/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 * 
 * Retrieving the values:
 * start date = get_post_meta( get_the_ID(), 'twchr_stream_data_start-date', true )
 * start time = get_post_meta( get_the_ID(), 'twchr_stream_data_start-time', true )
 * is_serie = get_post_meta( get_the_ID(), 'twchr_stream_data_is_serie', true )
 * duration = get_post_meta( get_the_ID(), 'twchr_stream_data_duration', true )
 * category = get_post_meta( get_the_ID(), 'twchr_stream_data_category', true )
 */



 
function twchr_stream_todDo($post){
	$values    = get_post_custom( $post->ID );
	$twchr_toDo_list_field = isset($values['twchr_toDo_list_field'][0]) ? $values['twchr_toDo_list_field'][0] : '';
	?>
    <metabox>
        <div class="overlay">
            <div class="overlay-content">            
                <div class="twchr_todo_list">
                    <div class="twchr_todo_list--header">
                        <button>X</button>
                    </div>
                    <ul></ul>
                </div>
            </div>
        </div>
        <div>
            <input  type="text" id="twchr_toDo_field" name="twchr_toDo_list_field" value="<?php echo esc_html($twchr_toDo_list_field)?>">
		</div>
        
        <script>
            const twchr_toDo_field = document.querySelector('#twchr_toDo_field');
            console.log(twchr_toDo_field.value);
            const  array = [{"name":"Agendar Stream","status":false,"index":0},{"name":"Notificar por Discord","status":true,"index":1},{"name":"Notificar por Faceboock","status":true,"index":2},{"name":"Notificar por Twiter","status":true,"index":3},{"name":"Iniciar Transmicion","status":true,"index":4},{"name":"Insertar Live en un post","status":true,"index":5},{"name":"Descargar Live","status":true,"index":6},{"name":"Importar Live como Streming","status":true,"index":7},{"name":"Subir Streming a YouTube","status":true,"index":8},{"name":"Cambiar fuente de Streaming de Twitch a YouTube","status":true,"index":9},{"name":"Agendar Stream","status":true,"index":0}];
            const todo_list = document.querySelector(".twchr_todo_list ul");
            const twchr_todo_overlay = document.querySelector("#twchr_stream_todDo .overlay");
        

            twchr_todo_overlay.querySelector(".twchr_todo_list--header button").addEventListener("click", (e)=>{
                e.preventDefault();
                twchr_todo_overlay.classList.toggle("maximized");
            });

            // Render todo_list
            array.forEach((value, key) => {
                const li = `<li class="${value.status === true ? 'active' : ''}"> <label> <span>${key}</span> <h3>${value.name}</h3> <input type="checkbox" name="twchr_todo_list" ${value.status === true ? 'checked' : ''}> </label></li>`;
                todo_list.innerHTML = todo_list.innerHTML + li;
            });

            const items_list = todo_list.querySelectorAll("input");
            let todoListUpdateState = [...JSON.parse(twchr_toDo_field.value)];
            [...todo_list.querySelectorAll("li")].forEach( (li, index) => {
                li.addEventListener('click',(e)=>{
                    if(items_list[index].checked == true){
                        li.classList.add("active");
                        if(!todoListUpdateState.includes(index)){
                            const name = li.querySelector("h3").textContent;
                            todoListUpdateState
                            const tchr_toDo = new twchr_todDo_json_constructor(name,true,index);
                            todoListUpdateState.push(tchr_toDo);
                        }
                    }else{
                        li.classList.remove("active");
                    }

                    [...todo_list.querySelectorAll("li")].forEach( (li_1, index_1) => {
                        if(items_list[index_1].checked == false){
                            if(todoListUpdateState.includes(index_1)){
                                const pos = todoListUpdateState.indexOf(index_1);
                                todoListUpdateState.splice(pos, 1);               
                            }
                        }
                    });
                    
                    twchr_toDo_field.value = JSON.stringify(todoListUpdateState);
                    //console.log();  
                });
            }
            );
            
            class twchr_todDo_json_constructor {
                constructor(name,status,index){
                    this.name = name;
                    this.status = status;
                    this.index = index;
                }
            }
        </script>
	<?php
}

function twchr_stream_toDo_metabox(){
	//add_meta_box($id:string,$title:string,$callback:callable,$screen:string|array|WP_Screen|null,$context:string,$priority:string,$callback_args:array|null )
	add_meta_box( 'twchr_stream_todDo', 'Twitcher stream to do', 'twchr_stream_todDo', 'twchr_streams', 'normal', 'high' );
}

add_action('add_meta_boxes','twchr_stream_toDo_metabox');


function twchr_stream_toDo_metabox_save($post_id){
/* 
Antes de guardar la información, necesito verificar tres cosas:
	1. Si la entrada se está autoguardando
	2. Comprobar que el usuario actual puede realmente modificar este contenido.
*/
	
	if (! current_user_can( 'edit_posts' )) {
        return;
    }		
	

		$allowed = array();
		if ( isset( $_POST['twchr_toDo_list_field'] ) ) {
			update_post_meta( $post_id, 'twchr_toDo_list_field', wp_kses( $_POST['twchr_toDo_list_field'], $allowed ) );
		}
	  
}


add_action( 'save_post', 'twchr_stream_toDo_metabox_save' );
